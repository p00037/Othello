@page "/fetchdata"
@using Othello.Blazor.Shared
@using Othello.Shared;
@using System.Threading.Tasks;
@using System.Timers;
@inject HttpClient Http

<style>

    .table {
        /*position: absolute;
        top: 50%;
        left: 50%;*/
        /* margin-top: -257px;
        margin-left: -257px;*/
    }

        .table td {
            width: 60px;
            height: 60px;
            background-color: #ddd;
            text-align: center;
            font-size: 3vw;
            cursor: pointer;
        }

        .table th, .table td {
            border: solid 1px black;
            /*実線 1px 黒*/
        }

    .list {
        max-width: 750px;
        margin: 0 auto;
        list-style: none;
        background-color: #fff;
        padding: 0;
    }

    .list-item {
        display: flex;
        display: -webkit-flex;
        -webkit-justify-content: flex-start;
        justify-content: flex-start;
        border-bottom: 2px solid #ddd;
    }

        .list-item > * {
            width: 50px;
            padding: 5px 10px;
            text-align: center;
        }

        .list-item *:last-child {
            -webkit-flex-grow: 1;
            flex-grow: 1;
        }
</style>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (boardState == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        @for (int x = 0; x < 8; x++)
        {
            <tr>
                @for (int y = 0; y < 8; y++)
                {
                    if (boardState.Board[x, y] == Piece.None)
                    {
                        <td></td>
                    }
                    else if (boardState.Board[x, y] == Piece.Black)
                    {
                        <td>🔴</td>
                    }
                    else if (boardState.Board[x, y] == Piece.White)
                    {
                        <td>🔵</td>
                    }

                }
            </tr>
        }
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private BoardState boardState = new BoardState();
    private Timer timer;

    protected override void OnInitialized()
    {
        SetTimmer();
    }

    private void SetTimmer()
    {
        // Create a timer with a two second interval.
        timer = new Timer(1000);

        // Hook up the Elapsed event for the timer.
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private async void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        var aiConfig = new AiConfig(boardState.Board, boardState.TurnPiece, "sampleAI");
        var result = await Http.PostAsJsonAsync("Ai", aiConfig);
        var boardPoint = await result.Content.ReadFromJsonAsync<BoardPoint>();
        Console.WriteLine($"X:{boardPoint.X} Y:{boardPoint.Y}");
        boardState.ExecuteTurn(boardPoint);
        StateHasChanged();

        if (boardState.GetPossibleSetStoneCount(Piece.Black) == 0 && 
            boardState.GetPossibleSetStoneCount(Piece.White) == 0)
        {
            timer.Stop();
        }
    }
}
